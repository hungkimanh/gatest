name: CVRP Solver CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering
    inputs:
      instance:
        description: 'VRP instance to run (e.g., CMT4.vrp)'
        required: false
        default: 'CMT4.vrp'
      generations:
        description: 'Number of generations'
        required: false
        default: '1000'
      population:
        description: 'Population size'
        required: false
        default: '200'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
        
    - name: Compile CVRP Solver
      run: |
        g++ -std=c++17 -O3 -o cvrp_solver ga8.cpp
        
    - name: Verify executable
      run: |
        ls -la cvrp_solver
        file cvrp_solver
        
    - name: Test with command line arguments
      run: |
        echo "Testing command line argument parsing..."
        ./cvrp_solver --help || ./cvrp_solver -h || echo "Help not implemented"
        
    - name: Run CVRP Solver with default parameters
      if: github.event_name != 'workflow_dispatch'
      run: |
        echo "Running CVRP Solver with default parameters..."
        ./cvrp_solver CMT4.vrp 1000 200
        
    - name: Run CVRP Solver with custom parameters
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Running CVRP Solver with custom parameters..."
        ./cvrp_solver "${{ github.event.inputs.instance }}" "${{ github.event.inputs.generations }}" "${{ github.event.inputs.population }}"
        
    - name: Show results
      run: |
        echo "=== Generated Results ==="
        if [ -f ga_results.csv ]; then
          echo "Results CSV:"
          cat ga_results.csv
        else
          echo "No results file generated"
        fi
        
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cvrp-results-single
        path: |
          ga_results.csv
          *.log
        retention-days: 30
        
  test-multiple-instances:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()
    
    strategy:
      matrix:
        instance: [CMT1, CMT2, CMT3, CMT4, CMT5]
        include:
          - instance: CMT1
            generations: 500
            population: 100
          - instance: CMT2  
            generations: 800
            population: 150
          - instance: CMT3
            generations: 1000
            population: 200
          - instance: CMT4
            generations: 1200
            population: 250
          - instance: CMT5
            generations: 1500
            population: 300
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
        
    - name: Compile CVRP Solver
      run: |
        g++ -std=c++17 -O3 -o cvrp_solver ga8.cpp
        
    - name: Check if VRP file exists
      run: |
        if [ -f "${{ matrix.instance }}.vrp" ]; then
          echo "${{ matrix.instance }}.vrp found"
          ls -la ${{ matrix.instance }}.vrp
        else
          echo "Warning: ${{ matrix.instance }}.vrp not found"
          echo "Available VRP files:"
          ls -la *.vrp || echo "No VRP files found"
        fi
        
    - name: Run solver for ${{ matrix.instance }}
      run: |
        echo "Running CVRP Solver with ${{ matrix.instance }}.vrp..."
        echo "Parameters: generations=${{ matrix.generations }}, population=${{ matrix.population }}"
        
        if [ -f "${{ matrix.instance }}.vrp" ]; then
          timeout 600 ./cvrp_solver "${{ matrix.instance }}.vrp" "${{ matrix.generations }}" "${{ matrix.population }}" || echo "Solver completed or timed out"
        else
          echo "Skipping ${{ matrix.instance }}.vrp - file not found"
          exit 0
        fi
        
    - name: Show results for ${{ matrix.instance }}
      run: |
        echo "=== Results for ${{ matrix.instance }} ==="
        if [ -f ga_results.csv ]; then
          echo "Results CSV:"
          cat ga_results.csv
        else
          echo "No results file generated for ${{ matrix.instance }}"
        fi
        
    - name: Upload results for ${{ matrix.instance }}
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cvrp-results-${{ matrix.instance }}
        path: |
          ga_results.csv
          *.log
        retention-days: 15

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-run
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies and tools
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make time
        
    - name: Create performance test version
      run: |
        cp ga8.cpp ga8_perf.cpp
        
        # Set smaller parameters for performance test
        sed -i 's/int maxGenerations = 10000;/int maxGenerations = 100;/' ga8_perf.cpp
        sed -i 's/int populationSize = 1000;/int populationSize = 50;/' ga8_perf.cpp
        
    - name: Compile performance version
      run: |
        g++ -std=c++17 -O3 -g -o cvrp_solver_perf ga8_perf.cpp
        
    - name: Run performance test
      run: |
        echo "=== Performance Test ==="
        echo "Running 3 times to get average performance..."
        
        for i in {1..3}; do
          echo "Run $i:"
          /usr/bin/time -v ./cvrp_solver_perf 2>&1 | tee run_$i.log
          echo "---"
        done
        
    - name: Analyze performance
      run: |
        echo "=== Performance Analysis ==="
        echo "Memory usage from runs:"
        grep "Maximum resident set size" run_*.log || true
        echo ""
        echo "Execution time from runs:"
        grep "Elapsed (wall clock) time" run_*.log || true
        
    - name: Upload performance logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-logs
        path: |
          run_*.log
          ga_results.csv
        retention-days: 7
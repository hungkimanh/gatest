name: CVRP Multi-Instance Runner

on:
  workflow_dispatch:
    inputs:
      instances:
        description: 'Ch·ªçn c√°c file CMT (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)'
        required: true
        default: 'CMT1,CMT2,CMT3,CMT4,CMT5'
        type: string
      runs:
        description: 'S·ªë l·∫ßn ch·∫°y'
        required: true
        default: '5'
        type: string
      generations:
        description: 'S·ªë th·∫ø h·ªá (Max Generations)'
        required: true
        default: '1000'
        type: string
      population:
        description: 'K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ (Population Size)'
        required: true
        default: '500'
        type: string

jobs:
  run-cvrp:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
        
    - name: Setup VRP files
      run: |
        echo "Copying VRP files from parent directory..."
        ls -la ../
        cp ../*.vrp . || echo "No VRP files found in parent, continuing..."
        ls -la *.vrp || echo "No VRP files available"
        
    - name: Compile CVRP Solver
      run: |
        g++ -std=c++17 -O3 -o cvrp_solver ga8.cpp
        ls -la cvrp_solver
        
    - name: Display run configuration
      run: |
        echo "üöõ CVRP Solver Configuration"
        echo "=================================="
        echo "Instances: ${{ inputs.instances }}"
        echo "S·ªë l·∫ßn ch·∫°y: ${{ inputs.runs }}"
        echo "Generations: ${{ inputs.generations }}"
        echo "Population: ${{ inputs.population }}"
        echo "=================================="
        
    - name: Run CVRP Solver for All Instances
      run: |
        # Create consolidated results file
        echo "Instance,Total_Vehicles,Population_Size,Max_Generations,Best_Cost,Optimal_Cost,GAP_Percent" > consolidated_results.csv
        
        # Parse instances from input (comma separated)
        IFS=',' read -ra INSTANCES <<< "${{ inputs.instances }}"
        
        # Loop through each instance
        for instance in "${INSTANCES[@]}"; do
          instance=$(echo "$instance" | xargs)  # trim whitespace
          echo ""
          echo "üöÄ === B·∫ÆT ƒê·∫¶U CH·∫†Y ${instance}.vrp ==="
          echo "================================================"
          
          if [ -f "${instance}.vrp" ]; then
            # Run multiple times for this instance
            for i in $(seq 1 ${{ inputs.runs }}); do
              echo ""
              echo "üìä === L·∫¶N CH·∫†Y $i/${{ inputs.runs }} cho ${instance} ==="
              
              # Remove old temp result
              rm -f ga_results.csv
              
              # Run once
              ./cvrp_solver "${instance}.vrp" "${{ inputs.generations }}" "${{ inputs.population }}" 1
              
              if [ -f ga_results.csv ]; then
                # Get the result line (skip header)
                result_line=$(tail -1 ga_results.csv)
                echo "üéØ K·∫øt qu·∫£ l·∫ßn $i: $result_line"
                
                # Append to consolidated results
                echo "$result_line" >> consolidated_results.csv
                echo "---"
              else
                echo "‚ùå L·ªói l·∫ßn ch·∫°y $i cho ${instance}"
              fi
            done
            
            echo "‚úÖ Ho√†n th√†nh ${instance} v·ªõi ${{ inputs.runs }} l·∫ßn ch·∫°y"
          else
            echo "‚ùå Kh√¥ng t√¨m th·∫•y file ${instance}.vrp"
          fi
        done
        
    - name: Show final summary
      run: |
        echo ""
        echo "üéâ === T√ìM T·∫ÆT T·∫§T C·∫¢ K·∫æT QU·∫¢ ==="
        echo "================================="
        
        if [ -f consolidated_results.csv ]; then
          echo "‚úÖ T·∫§T C·∫¢ K·∫æT QU·∫¢ T·ª™ T·∫§T C·∫¢ INSTANCES:"
          echo ""
          cat consolidated_results.csv
          echo ""
          
          # Calculate statistics
          echo "ÔøΩ Th·ªëng k√™ t·ªïng h·ª£p:"
          echo "- File: ${{ matrix.instance }}.vrp"
          echo "- S·ªë l·∫ßn ch·∫°y: ${{ inputs.runs }}"
          echo "- Population: ${{ inputs.population }}"
          echo "- Generations: ${{ inputs.generations }}"
          
          # Get best cost (skip header, get minimum cost)
          if [ $(wc -l < ga_results.csv) -gt 1 ]; then
            best_cost=$(tail -n +2 ga_results.csv | cut -d',' -f5 | sort -n | head -1)
            echo "- Best cost: $best_cost"
          fi
        else
          echo "‚ùå Kh√¥ng c√≥ file k·∫øt qu·∫£ cho ${{ matrix.instance }}"
        fi
        
    - name: Upload all results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cvrp-all-results-runs${{ inputs.runs }}
        path: |
          consolidated_results.csv
          *.log
        retention-days: 30


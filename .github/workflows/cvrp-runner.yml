name: CVRP Multi-Instance Runner

on:
  workflow_dispatch:
    inputs:
      instances:
        description: 'Ch·ªçn c√°c file CMT (c√°ch nhau b·∫±ng d·∫•u ph·∫©y)'
        required: true
        default: 'CMT1,CMT2,CMT3,CMT4,CMT5'
        type: string
      runs:
        description: 'S·ªë l·∫ßn ch·∫°y'
        required: true
        default: '5'
        type: string
      generations:
        description: 'S·ªë th·∫ø h·ªá (Max Generations)'
        required: true
        default: '1000'
        type: string
      population:
        description: 'K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ (Population Size)'
        required: true
        default: '500'
        type: string

jobs:
  run-cvrp:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        instance: ${{ fromJson(format('["{0}"]', join(split(inputs.instances, ','), '","'))) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make
        
    - name: Setup VRP files
      run: |
        echo "Copying VRP files from parent directory..."
        ls -la ../
        cp ../*.vrp . || echo "No VRP files found in parent, continuing..."
        ls -la *.vrp || echo "No VRP files available"
        
    - name: Compile CVRP Solver
      run: |
        g++ -std=c++17 -O3 -o cvrp_solver ga8.cpp
        ls -la cvrp_solver
        
    - name: Display run configuration
      run: |
        echo "üöõ CVRP Solver Configuration"
        echo "=================================="
        echo "File: ${{ matrix.instance }}.vrp"
        echo "S·ªë l·∫ßn ch·∫°y: ${{ inputs.runs }}"
        echo "Generations: ${{ inputs.generations }}"
        echo "Population: ${{ inputs.population }}"
        echo "=================================="
        
    - name: Run CVRP Solver Multiple Times
      run: |
        echo "üöÄ B·∫Øt ƒë·∫ßu ch·∫°y ${{ matrix.instance }}.vrp v·ªõi ${{ inputs.runs }} l·∫ßn..."
        
        if [ -f "${{ matrix.instance }}.vrp" ]; then
          # Create results file with header
          echo "Instance,Total_Vehicles,Population_Size,Max_Generations,Best_Cost,Optimal_Cost,GAP_Percent" > ga_results_${{ matrix.instance }}.csv
          
          # Run multiple times and accumulate results
          for i in $(seq 1 ${{ inputs.runs }}); do
            echo ""
            echo "üìä === L·∫¶N CH·∫†Y $i/${{ inputs.runs }} cho ${{ matrix.instance }} ==="
            
            # Remove old temp result
            rm -f ga_results.csv
            
            # Run once
            ./cvrp_solver "${{ matrix.instance }}.vrp" "${{ inputs.generations }}" "${{ inputs.population }}" 1
            
            if [ -f ga_results.csv ]; then
              # Get the result line (skip header)
              result_line=$(tail -1 ga_results.csv)
              echo "üéØ K·∫øt qu·∫£ l·∫ßn $i: $result_line"
              
              # Append to accumulated results
              echo "$result_line" >> ga_results_${{ matrix.instance }}.csv
              echo "---"
            else
              echo "‚ùå L·ªói l·∫ßn ch·∫°y $i"
            fi
          done
          
          # Copy accumulated results to standard name for upload
          cp ga_results_${{ matrix.instance }}.csv ga_results.csv
        else
          echo "‚ùå Kh√¥ng t√¨m th·∫•y file ${{ matrix.instance }}.vrp"
          echo "üìÅ Available files:"
          ls -la *.vrp
          exit 1
        fi
        
    - name: Show final summary
      run: |
        echo ""
        echo "üéâ === T√ìM T·∫ÆT K·∫æT QU·∫¢ ${{ matrix.instance }} ==="
        echo "============================================="
        
        if [ -f ga_results.csv ]; then
          echo "‚úÖ T·∫•t c·∫£ k·∫øt qu·∫£ cho ${{ matrix.instance }}:"
          echo ""
          cat ga_results.csv
          echo ""
          
          # Calculate statistics
          echo "ÔøΩ Th·ªëng k√™ t·ªïng h·ª£p:"
          echo "- File: ${{ matrix.instance }}.vrp"
          echo "- S·ªë l·∫ßn ch·∫°y: ${{ inputs.runs }}"
          echo "- Population: ${{ inputs.population }}"
          echo "- Generations: ${{ inputs.generations }}"
          
          # Get best cost (skip header, get minimum cost)
          if [ $(wc -l < ga_results.csv) -gt 1 ]; then
            best_cost=$(tail -n +2 ga_results.csv | cut -d',' -f5 | sort -n | head -1)
            echo "- Best cost: $best_cost"
          fi
        else
          echo "‚ùå Kh√¥ng c√≥ file k·∫øt qu·∫£ cho ${{ matrix.instance }}"
        fi
        
    - name: Upload results per instance
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cvrp-results-${{ matrix.instance }}-runs${{ inputs.runs }}
        path: |
          ga_results.csv
          *.log
        retention-days: 30

  consolidate-results:
    runs-on: ubuntu-latest
    needs: run-cvrp
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Consolidate all results
      run: |
        echo "üìã T·ªîNG H·ª¢P T·∫§T C·∫¢ K·∫æT QU·∫¢"
        echo "=========================="
        echo ""
        
        # Create consolidated CSV
        echo "Instance,Total_Vehicles,Population_Size,Max_Generations,Best_Cost,Optimal_Cost,GAP_Percent" > consolidated_results.csv
        
        # Merge all CSV files
        find . -name "ga_results.csv" -exec tail -n +2 {} \; >> consolidated_results.csv
        
        echo "‚úÖ T·∫•t c·∫£ k·∫øt qu·∫£:"
        cat consolidated_results.csv
        
    - name: Upload consolidated results
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-all-results
        path: consolidated_results.csv
        retention-days: 30
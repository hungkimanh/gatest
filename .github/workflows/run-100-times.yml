name: Run GA 100 Times

on:
  workflow_dispatch:  # Allow manual trigger
    inputs:
      test_file:
        description: 'Test file to use (default: CMT1.vrp)'
        required: false
        default: 'CMT1.vrp'
      num_runs:
        description: 'Number of runs (default: 100)'
        required: false
        default: '100'

jobs:
  run-ga-multiple:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours timeout
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ build-essential bc
        
    - name: Compile GA program
      run: |
        echo "📦 Compiling ga8.cpp with optimizations..."
        g++ -std=c++17 -O2 ga8.cpp -o ga8
        echo "✅ Compilation complete"
        
    - name: Run GA multiple times
      run: |
        echo "🚀 Starting ${{ github.event.inputs.num_runs || '100' }} runs of GA with ${{ github.event.inputs.test_file || 'CMT1.vrp' }}"
        echo "========================================"
        
        # Set variables
        NUM_RUNS=${{ github.event.inputs.num_runs || '100' }}
        TEST_FILE="${{ github.event.inputs.test_file || 'CMT1.vrp' }}"
        
        # Clean up old results
        rm -f ga_results.csv
        rm -f run_summary.txt
        
        # Create header for summary
        echo "Run,Best_Cost,Is_Feasible,Vehicles_Used,Execution_Time" > run_summary.txt
        
        echo ""
        echo "🔄 Starting $NUM_RUNS runs..."
        echo "======================="
        
        # Counter for feasible solutions
        feasible_count=0
        total_cost=0
        min_cost=999999
        max_cost=0
        
        # Run multiple times
        for i in $(seq 1 $NUM_RUNS); do
            echo -n "Run $i/$NUM_RUNS: "
            
            # Record start time
            start_time=$(date +%s.%N)
            
            # Run GA and capture output
            ./ga8 > temp_output_$i.txt 2>&1
            exit_code=$?
            
            # Record end time
            end_time=$(date +%s.%N)
            execution_time=$(echo "$end_time - $start_time" | bc -l)
            
            # Parse results
            if [ -f "ga_results.csv" ] && [ $exit_code -eq 0 ]; then
                # Get last result from CSV
                last_result=$(tail -n 1 ga_results.csv)
                
                if [ ! -z "$last_result" ]; then
                    # Parse CSV fields
                    cost=$(echo $last_result | cut -d',' -f4)
                    vehicles=$(echo $last_result | cut -d',' -f2)
                    
                    # Check feasibility from output
                    if grep -q "FEASIBLE" temp_output_$i.txt && ! grep -q "INFEASIBLE" temp_output_$i.txt; then
                        feasible="TRUE"
                        feasible_count=$((feasible_count + 1))
                        
                        # Update statistics for feasible solutions
                        total_cost=$(echo "$total_cost + $cost" | bc -l)
                        
                        # Update min/max
                        if (( $(echo "$cost < $min_cost" | bc -l) )); then
                            min_cost=$cost
                        fi
                        if (( $(echo "$cost > $max_cost" | bc -l) )); then
                            max_cost=$cost
                        fi
                    else
                        feasible="FALSE"
                    fi
                    
                    # Save to summary
                    printf "%d,%.2f,%s,%s,%.3f\n" $i $cost $feasible $vehicles $execution_time >> run_summary.txt
                    
                    echo "Cost: $cost, Feasible: $feasible, Time: ${execution_time}s"
                else
                    echo "❌ No valid results"
                    printf "%d,ERROR,FALSE,0,%.3f\n" $i $execution_time >> run_summary.txt
                fi
            else
                echo "❌ Execution failed"
                printf "%d,ERROR,FALSE,0,%.3f\n" $i $execution_time >> run_summary.txt
            fi
            
            # Cleanup temp file
            rm -f temp_output_$i.txt
            
            # Progress indicator every 10 runs
            if [ $((i % 10)) -eq 0 ]; then
                echo ""
                echo "✓ Completed $i/$NUM_RUNS runs... ($feasible_count feasible so far)"
                echo ""
            fi
        done
        
        echo ""
        echo "🎉 All $NUM_RUNS runs completed!"
        echo "=========================="
        
        # Calculate statistics
        infeasible_count=$((NUM_RUNS - feasible_count))
        feasible_percentage=$(echo "scale=1; $feasible_count * 100 / $NUM_RUNS" | bc -l)
        
        echo ""
        echo "📊 STATISTICAL ANALYSIS:"
        echo "========================"
        echo "Feasible solutions: $feasible_count/$NUM_RUNS (${feasible_percentage}%)"
        echo "Infeasible solutions: $infeasible_count/$NUM_RUNS"
        
        # Analysis for feasible solutions only
        if [ $feasible_count -gt 0 ]; then
            avg_cost=$(echo "scale=2; $total_cost / $feasible_count" | bc -l)
            
            echo ""
            echo "📈 FEASIBLE SOLUTIONS ANALYSIS:"
            echo "==============================="
            echo "Best cost: $min_cost"
            echo "Worst cost: $max_cost"
            echo "Average cost: $avg_cost"
            
            # Calculate standard deviation
            sum_sq_diff=0
            while IFS=, read -r run cost feasible vehicles time; do
                if [ "$feasible" = "TRUE" ] && [ "$cost" != "ERROR" ]; then
                    diff=$(echo "$cost - $avg_cost" | bc -l)
                    sq_diff=$(echo "$diff * $diff" | bc -l)
                    sum_sq_diff=$(echo "$sum_sq_diff + $sq_diff" | bc -l)
                fi
            done < <(tail -n +2 run_summary.txt)  # Skip header
            
            if [ $feasible_count -gt 1 ]; then
                variance=$(echo "scale=4; $sum_sq_diff / ($feasible_count - 1)" | bc -l)
                std_dev=$(echo "scale=2; sqrt($variance)" | bc -l)
                echo "Standard deviation: $std_dev"
            fi
        fi
        
        # Execution time analysis
        echo ""
        echo "⏱️ EXECUTION TIME ANALYSIS:"
        echo "==========================="
        
        # Extract execution times (skip header)
        total_time=0
        min_time=999999
        max_time=0
        count=0
        
        while IFS=, read -r run cost feasible vehicles time; do
            if [ "$time" != "Execution_Time" ] && [ "$time" != "" ]; then
                total_time=$(echo "$total_time + $time" | bc -l)
                count=$((count + 1))
                
                if (( $(echo "$time < $min_time" | bc -l) )); then
                    min_time=$time
                fi
                if (( $(echo "$time > $max_time" | bc -l) )); then
                    max_time=$time
                fi
            fi
        done < run_summary.txt
        
        if [ $count -gt 0 ]; then
            avg_time=$(echo "scale=3; $total_time / $count" | bc -l)
            echo "Fastest run: ${min_time}s"
            echo "Slowest run: ${max_time}s"
            echo "Average time: ${avg_time}s"
            echo "Total time: ${total_time}s"
        fi
        
    - name: Create final summary
      run: |
        echo "💾 Creating final summary..."
        
        # Extract key statistics
        NUM_RUNS=${{ github.event.inputs.num_runs || '100' }}
        TEST_FILE="${{ github.event.inputs.test_file || 'CMT1.vrp' }}"
        
        feasible_count=$(grep -c "TRUE" run_summary.txt)
        feasible_percentage=$(echo "scale=1; $feasible_count * 100 / $NUM_RUNS" | bc -l)
        
        # Create comprehensive summary
        cat > final_summary.txt << EOF
GA PERFORMANCE ANALYSIS ($NUM_RUNS RUNS)
Date: $(date)
Problem: $TEST_FILE
Population: 500
Generations: 100
GitHub Run: ${{ github.run_number }}

SOLUTION QUALITY:
- Feasible solutions: $feasible_count/$NUM_RUNS (${feasible_percentage}%)
- Infeasible solutions: $((NUM_RUNS - feasible_count))/$NUM_RUNS

EOF
        
        if [ $feasible_count -gt 0 ]; then
            # Get feasible cost statistics
            grep "TRUE" run_summary.txt | cut -d',' -f2 > feasible_costs.txt
            min_cost=$(sort -n feasible_costs.txt | head -1)
            max_cost=$(sort -n feasible_costs.txt | tail -1)
            avg_cost=$(awk '{sum+=$1} END {printf "%.2f", sum/NR}' feasible_costs.txt)
            
            cat >> final_summary.txt << EOF
FEASIBLE COSTS:
- Best: $min_cost
- Worst: $max_cost
- Average: $avg_cost

EOF
            rm -f feasible_costs.txt
        fi
        
        # Add execution time summary
        tail -n +2 run_summary.txt | cut -d',' -f5 > execution_times.txt
        min_time=$(sort -n execution_times.txt | head -1)
        max_time=$(sort -n execution_times.txt | tail -1)
        avg_time=$(awk '{sum+=$1} END {printf "%.3f", sum/NR}' execution_times.txt)
        total_time=$(awk '{sum+=$1} END {printf "%.1f", sum}' execution_times.txt)
        
        cat >> final_summary.txt << EOF
EXECUTION TIME:
- Fastest: ${min_time}s
- Slowest: ${max_time}s
- Average: ${avg_time}s
- Total: ${total_time}s

DETAILED RESULTS: See run_summary.txt and ga_results.csv
EOF
        
        rm -f execution_times.txt
        
        echo "📋 Final Summary:"
        echo "=================="
        cat final_summary.txt
        
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: ga-100-runs-results-${{ github.run_number }}
        path: |
          run_summary.txt
          final_summary.txt
          ga_results.csv
        retention-days: 90
        
    - name: Create results comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the final summary
          const summary = fs.readFileSync('final_summary.txt', 'utf8');
          
          // Read key results for quick view
          const runSummary = fs.readFileSync('run_summary.txt', 'utf8');
          const lines = runSummary.split('\n');
          const feasibleRuns = lines.filter(line => line.includes('TRUE')).length;
          const totalRuns = lines.length - 2; // Exclude header and empty line
          
          const comment = `## 🎯 GA Multiple Runs Results
          
**${{ github.event.inputs.num_runs || '100' }} runs completed successfully!**

### 📊 Quick Stats:
- ✅ Feasible: ${feasibleRuns}/${{ github.event.inputs.num_runs || '100' }} (${(feasibleRuns * 100 / ${{ github.event.inputs.num_runs || '100' }}).toFixed(1)}%)
- ❌ Infeasible: ${${{ github.event.inputs.num_runs || '100' }} - feasibleRuns}/${{ github.event.inputs.num_runs || '100' }}

### 📋 Full Summary:
\`\`\`
${summary}
\`\`\`

📥 [Download detailed results](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})`;

          // Create issue comment (since this is manually triggered)
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: comment
          });
